import { InjectionToken, Injectable, Optional, Inject } from '@angular/core';
import * as i0 from '@angular/core';
/**
 * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.
 * @param def The route definition type
 */
export function isHttpInterceptorRouteConfig(def) {
  return def.uri !== undefined;
}
/**
 * Gets and sets configuration for the internal Auth0 client. This can be
 * used to provide configuration outside of using AuthModule.forRoot, i.e. from
 * a factory provided by APP_INITIALIZER.
 *
 * @usage
 *
 * ```js
 * // app.module.ts
 * // ---------------------------
 * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';
 *
 * // Provide an initializer function that returns a Promise
 * function configInitializer(
 *   http: HttpClient,
 *   config: AuthClientConfig
 * ) {
 *   return () =>
 *     http
 *       .get('/config')
 *       .toPromise()
 *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here
 * }
 *
 * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot
 * imports: [
 *   // other imports..
 *
 *   HttpClientModule,
 *   AuthModule.forRoot(),   //<- don't pass any config here
 * ],
 * providers: [
 *   {
 *     provide: APP_INITIALIZER,
 *     useFactory: configInitializer,    // <- pass your initializer function here
 *     deps: [HttpClient, AuthClientConfig],
 *     multi: true,
 *   },
 * ],
 * ```
 *
 */
export class AuthClientConfig {
  constructor(config) {
    if (config) {
      this.set(config);
    }
  }
  /**
   * Sets configuration to be read by other consumers of the service (see usage notes)
   * @param config The configuration to set
   */
  set(config) {
    this.config = config;
  }
  /**
   * Gets the config that has been set by other consumers of the service
   */
  get() {
    return this.config;
  }
}
AuthClientConfig.ɵprov = i0.ɵɵdefineInjectable({
  factory: function AuthClientConfig_Factory() {
    return new AuthClientConfig(i0.ɵɵinject(AuthConfigService, 8));
  },
  token: AuthClientConfig,
  providedIn: 'root',
});
AuthClientConfig.decorators = [
  { type: Injectable, args: [{ providedIn: 'root' }] },
];
AuthClientConfig.ctorParameters = () => [
  {
    type: undefined,
    decorators: [
      { type: Optional },
      { type: Inject, args: [AuthConfigService] },
    ],
  },
];
/**
 * Injection token for accessing configuration.
 *
 * @usageNotes
 *
 * Use the `Inject` decorator to access the configuration from a service or component:
 *
 * ```
 * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}
 * ```
 */
export const AuthConfigService = new InjectionToken('auth0-angular.config');
//# sourceMappingURL=data:application/json;base64,
