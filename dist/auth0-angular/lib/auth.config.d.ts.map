{"version":3,"file":"auth.config.d.ts","sources":["auth.config.d.ts"],"names":[],"mappingssourcesContent":["import { CacheLocation, GetTokenSilentlyOptions } from '@auth0/auth0-spa-js';\nimport { InjectionToken } from '@angular/core';\n/**\n * Defines a common set of HTTP methods.\n */\nexport declare const enum HttpMethod {\n    Get = \"GET\",\n    Post = \"POST\",\n    Put = \"PUT\",\n    Patch = \"PATCH\",\n    Delete = \"DELETE\",\n    Head = \"HEAD\"\n}\n/**\n * Defines the type for a route config entry. Can either be:\n *\n * - an object of type HttpInterceptorConfig\n * - a string\n */\nexport declare type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n * @param def The route definition type\n */\nexport declare function isHttpInterceptorRouteConfig(def: ApiRouteDefinition): def is HttpInterceptorRouteConfig;\n/**\n * Configuration for the HttpInterceptor\n */\nexport interface HttpInterceptorConfig {\n    allowedList: ApiRouteDefinition[];\n}\n/**\n * Configuration for a single interceptor route\n */\nexport interface HttpInterceptorRouteConfig {\n    /**\n     * The URL to test, by supplying the URL to match.\n     * If `test` is a match for the current request path from the HTTP client, then\n     * an access token is attached to the request in the\n     *  [\"Authorization\" header](https://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-20#section-2.1).\n     *\n     * If the test does not pass, the request proceeds without the access token attached.\n     *\n     * A wildcard character can be used to match only the start of the URL.\n     *\n     * @usagenotes\n     *\n     * '/api' - exactly match the route /api\n     * '/api/*' - match any route that starts with /api/\n     */\n    uri: string;\n    /**\n     * The options that are passed to the SDK when retrieving the\n     * access token to attach to the outgoing request.\n     */\n    tokenOptions?: GetTokenSilentlyOptions;\n    /**\n     * The HTTP method to match on. If specified, the HTTP method of\n     * the outgoing request will be checked against this. If there is no match, the\n     * Authorization header is not attached.\n     *\n     * The HTTP method name is case-sensitive.\n     */\n    httpMethod?: HttpMethod | string;\n}\n/**\n * Configuration for the authentication service\n */\nexport interface AuthConfig {\n    /**\n     * Your Auth0 account domain such as `'example.auth0.com'`,\n     * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n     * (when using [custom domains](https://auth0.com/docs/custom-domains))\n     */\n    domain: string;\n    /**\n     * The issuer to be used for validation of JWTs, optionally defaults to the domain above\n     */\n    issuer?: string;\n    /**\n     * The Client ID found on your Application settings page\n     */\n    clientId: string;\n    /**\n     * The default URL where Auth0 will redirect your browser to with\n     * the authentication result. It must be added to the\n     * \"Allowed Callback URLs\" field in your Auth0 Application's\n     * settings. If not provided here, it should be provided in the other\n     * methods that provide authentication.\n     */\n    redirectUri?: string;\n    /**\n     * By default, if the page URL has code and state parameters, the SDK will assume they are for\n     * an Auth0 application and attempt to exchange the code for a token.\n     * In some cases the code might be for something else (e.g. another OAuth SDK). In these\n     * instances you can instruct the client to ignore them by setting `skipRedirectCallback`.\n     *\n     * ```js\n     * AuthModule.forRoot({\n     *   skipRedirectCallback: window.location.pathname === '/other-callback'\n     * })\n     * ```\n     *\n     * **Note**: In the above example, `/other-callback` is an existing route that will be called\n     * by any other OAuth provider with a `code` (or `error` in case when something went wrong) and `state`.\n     *\n     */\n    skipRedirectCallback?: boolean;\n    /**\n     * The value in seconds used to account for clock skew in JWT expirations.\n     * Typically, this value is no more than a minute or two at maximum.\n     * Defaults to 60s.\n     */\n    leeway?: number;\n    /**\n     * The location to use when storing cache data. Valid values are `memory` or `localstorage`.\n     * The default setting is `memory`.\n     */\n    cacheLocation?: CacheLocation;\n    /**\n     * If true, refresh tokens are used to fetch new access tokens from the Auth0 server.\n     * If false, the legacy technique of using a hidden iframe and the `authorization_code` grant with `prompt=none` is used.\n     * The default setting is `false`.\n     *\n     * **Note**: Use of refresh tokens must be enabled by an administrator on your Auth0 client application.\n     */\n    useRefreshTokens?: boolean;\n    /**\n     * A maximum number of seconds to wait before declaring background calls to /authorize as failed for timeout\n     * Defaults to 60s.\n     */\n    authorizeTimeoutInSeconds?: number;\n    /**\n     * Changes to recommended defaults, like defaultScope\n     */\n    advancedOptions?: {\n        /**\n         * The default scope to be included with all requests.\n         * If not provided, 'openid profile email' is used. This can be set to `null` in order to effectively remove the default scopes.\n         *\n         * Note: The `openid` scope is **always applied** regardless of this setting.\n         */\n        defaultScope?: string;\n    };\n    /**\n     * Maximum allowable elapsed time (in seconds) since authentication.\n     * If the last time the user authenticated is greater than this value,\n     * the user must be reauthenticated.\n     */\n    maxAge?: string | number;\n    /**\n     * The default scope to be used on authentication requests.\n     * The defaultScope defined in the Auth0Client is included\n     * along with this scope\n     */\n    scope?: string;\n    /**\n     * The default audience to be used for requesting API access.\n     */\n    audience?: string;\n    /**\n     * Configuration for the built-in Http Interceptor, used for\n     * automatically attaching access tokens.\n     */\n    httpInterceptor?: HttpInterceptorConfig;\n    /**\n     * Path in your application to redirect to when the Authorization server\n     * returns an error. Defaults to `/`\n     */\n    errorPath?: string;\n    /**\n     * If you need to send custom parameters to the Authorization Server,\n     * make sure to use the original parameter name.\n     */\n    [key: string]: any;\n}\n/**\n * Gets and sets configuration for the internal Auth0 client. This can be\n * used to provide configuration outside of using AuthModule.forRoot, i.e. from\n * a factory provided by APP_INITIALIZER.\n *\n * @usage\n *\n * ```js\n * // app.module.ts\n * // ---------------------------\n * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';\n *\n * // Provide an initializer function that returns a Promise\n * function configInitializer(\n *   http: HttpClient,\n *   config: AuthClientConfig\n * ) {\n *   return () =>\n *     http\n *       .get('/config')\n *       .toPromise()\n *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here\n * }\n *\n * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot\n * imports: [\n *   // other imports..\n *\n *   HttpClientModule,\n *   AuthModule.forRoot(),   //<- don't pass any config here\n * ],\n * providers: [\n *   {\n *     provide: APP_INITIALIZER,\n *     useFactory: configInitializer,    // <- pass your initializer function here\n *     deps: [HttpClient, AuthClientConfig],\n *     multi: true,\n *   },\n * ],\n * ```\n *\n */\nexport declare class AuthClientConfig {\n    private config?;\n    constructor(config?: AuthConfig);\n    /**\n     * Sets configuration to be read by other consumers of the service (see usage notes)\n     * @param config The configuration to set\n     */\n    set(config: AuthConfig): void;\n    /**\n     * Gets the config that has been set by other consumers of the service\n     */\n    get(): AuthConfig;\n}\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\nexport declare const AuthConfigService: InjectionToken<AuthConfig>;\n"]}